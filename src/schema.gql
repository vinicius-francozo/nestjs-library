# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CategoryEntity {
  id: ID!
  name: String!
}

type FavoriteEntity {
  id: ID!
  book: BookEntity!
  user: UserEntity!
}

type RentEntity {
  id: ID!
  status: Float!
  book: BookEntity!
  user: UserEntity!
}

type ReviewEntity {
  id: ID!
  text: String!
  rate: Float!
  book: BookEntity!
  user: UserEntity!
}

type BookEntity {
  id: ID!
  title: String!
  pages: Float!
  publisher: String!
  sinopsis: String!
  edition: String!
  release_date: String!
  cover: String!
  user: UserEntity!
  author: AuthorEntity!
  category: CategoryEntity!
  reviews: [ReviewEntity!]!
  favorites: [FavoriteEntity!]!
  rents: [RentEntity!]!
}

type AuthorEntity {
  id: ID!
  name: String!
  surname: String!
  description: String!
  country: String!
  picture: String!
  birth_date: String!
  user: UserEntity!
  books: [BookEntity!]!
}

type UserEntity {
  id: ID!
  username: String!
  password: String!
  email: String!
  name: String
  surname: String
  age: Float
  phone: String
  street: String
  neighbourhood: String
  number: String
  city: String
  country: String
  image: String
  isAdmin: Boolean
  authors: [AuthorEntity!]!
  books: [BookEntity!]!
  reviews: [ReviewEntity!]!
  favorites: [FavoriteEntity!]!
  rents: [RentEntity!]!
}

type Query {
  sayHello: String!
  findOneUser(id: String!): UserEntity!
  findAllBooks: [BookEntity!]!
  bookPerPage(perPage: String!, page: String!): [BookEntity!]!
  bookByName(name: String!): [BookEntity!]!
  findOneBook(id: String!): BookEntity!
  findAllCategories: [CategoryEntity!]!
  getUserFavorites: [FavoriteEntity!]!
  getFavoriteByUserAndBookId(bookId: String!): Boolean!
  listCheckout: [RentEntity!]!
  listRentedOrCheckout(bookId: String!): [RentEntity!]!
  listRents: [RentEntity!]!
  getUserReviews: [ReviewEntity!]!
  authorPerPage(perPage: String!, page: String!): [AuthorEntity!]!
  findOneAuthor(id: String!): AuthorEntity!
  findAllAuthors: [AuthorEntity!]!
}

type Mutation {
  login(data: AuthLoginInput!): String!
  createUser(data: CreateUserInput!): UserEntity!
  updateUser(data: UpdateUserInput!): UserEntity!
  changeImage(image: Upload): UserEntity!
  createBook(data: CreateBookInput!): BookEntity!
  deleteBook(id: String!): Boolean!
  updateBook(id: String!, data: UpdateBookInput!): BookEntity!
  createCategory(data: CreateCategoryInput!): CategoryEntity!
  createFavorite(bookId: String!): Boolean!
  removeFavorite(bookId: String!): Boolean!
  createCheckout(bookId: String!): Boolean!
  confirmPurchase: Boolean!
  returnBook(id: String!): Boolean!
  removeBook(id: String!): Boolean!
  createReview(bookId: String!, data: CreateReviewInput!): ReviewEntity!
  updateReview(id: String!, data: UpdateReviewInput!): Boolean!
  deleteReview(id: String!): Boolean!
  createAuthor(data: CreateAuthorInput!): AuthorEntity!
  deleteAuthor(id: String!): Boolean!
  updateAuthor(id: String!, data: UpdateAuthorInput!): AuthorEntity!
}

input AuthLoginInput {
  username: String!
  password: String!
}

input CreateUserInput {
  username: String!
  password: String!
  confirmPassword: String!
  email: String!
}

input UpdateUserInput {
  username: String
  email: String
  name: String
  surname: String
  age: Float
  phone: String
  street: String
  neighbourhood: String
  number: String
  city: String
  country: String
  image: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateBookInput {
  title: String!
  publisher: String!
  sinopsis: String!
  edition: String!
  cover: Upload
  pages: Float!
  release_date: String!
  author_id: Float!
  category_id: Float!
}

input UpdateBookInput {
  title: String
  publisher: String
  sinopsis: String
  edition: String
  cover: Upload
  pages: Float
  release_date: String
  author_id: Float
  category_id: Float
}

input CreateCategoryInput {
  name: String!
}

input CreateReviewInput {
  rate: Float!
  text: String!
}

input UpdateReviewInput {
  rate: Float
  text: String
}

input CreateAuthorInput {
  name: String!
  surname: String!
  description: String!
  country: String!
  picture: Upload!
  birth_date: String!
}

input UpdateAuthorInput {
  name: String
  surname: String
  description: String
  country: String
  picture: Upload
  birth_date: String
}